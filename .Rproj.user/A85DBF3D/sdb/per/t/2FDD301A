{
    "contents" : "library(shiny)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(DT)\nlibrary(ggplot2)\n\n\nshinyServer( function(input, output, session) {\n  \n  \n  # servidores = read.table(\"servidores2.csv\", header = TRUE, sep = \";\")\n  servidores <- readRDS(\"servidores.rds\")\n  servidores$NOME = as.character(servidores$NOME)\n  carreiras_populosas = servidores %>% select(CARGO) %>% group_by(CARGO) %>% summarise(n=n()) %>% \n                arrange(desc(n)) %>% slice(1:20) %>% select(CARGO) %>% as.matrix() %>% c()\n  carreiras_bempagas = servidores %>% group_by(CARGO) %>% summarise(n=mean(REMUNERACAO)) %>% \n                arrange(desc(n)) %>% slice(1:20) %>% select(CARGO) %>% as.matrix() %>% c()\n  \n  ####################################SUMARIO###########################################    \n  carreiras_grandes = reactive({servidores %>% group_by(CARGO) %>% summarise(N=n()) %>% \n      filter(N>input$min_servidores) %>% select(CARGO) %>% as.matrix() %>% c()})\n  carreiras_bem_remun = reactive({servidores %>% group_by(CARGO) %>% summarise(N=mean(REMUNERACAO)) %>% \n      filter(N>input$min_remuneracao) %>% as.matrix() %>% c()})\n  \n  # Histograma\n  output$plot1 <- renderPlot({\n    servidores %>% filter(CARGO %in% carreiras_bem_remun(), CARGO %in% carreiras_grandes()) %>% filter(!is.na(UF)) %>% \n    ggplot(aes(REMUNERACAO)) + \n      geom_histogram(colour = \"darkblue\", fill = \"skyblue\") + \n      geom_vline(aes(xintercept=mean(REMUNERACAO, na.rm=T)), color=\"red\", linetype=\"dashed\", size=0.8) +\n      geom_vline(aes(xintercept=median(REMUNERACAO, na.rm=T)), color=\"black\", linetype=\"dashed\", size=0.8) +\n      labs(x=\"Remuneração\", y=\"\", title=\"Histograma\") +\n      scale_y_continuous(breaks=seq(0,60000,5000)) + scale_x_continuous(breaks=seq(0,50000,5000))\n    \n    \n  })\n  \n  # Boxplot\n  output$plot2 <- renderPlot({\n    servidores %>% filter(CARGO %in% carreiras_bem_remun(), CARGO %in% carreiras_grandes()) %>%  \n      ggplot(aes(UF, REMUNERACAO)) + \n      geom_boxplot(colour = \"black\", fill = \"#FF9999\") + \n      labs(x=\"Estado\", y=\"\", title=\"Boxplot\") +\n      scale_y_continuous(breaks=seq(0,60000,3000))\n  })\n  \n  # Top carreiras mais populosas\n  output$plot7 <- renderPlot({\n    servidores %>% filter(CARGO %in% carreiras_bem_remun(), CARGO %in% carreiras_grandes(), !is.na(CARGO)) %>% \n      group_by(CARGO) %>% \n      summarise(N_Servidores = n(), Salario_Medio = mean(REMUNERACAO), Salario_Max = max(REMUNERACAO), Salario_Min = min(REMUNERACAO)) %>% \n      arrange(desc(N_Servidores)) %>% slice(1:15) %>%\n      ggplot(aes(x=reorder(CARGO, Salario_Medio), y=Salario_Medio)) + \n      geom_bar(stat=\"identity\", fill = \"darkgreen\") + \n      labs(x=\"\", y=\"Salario Medio\", title=\"As 15 Carreiras mais populosas\") +\n      coord_flip()\n   \n  })\n  \n  # numero de carreiras\n  output$text1 <- renderText ({\n    t=servidores %>% filter(CARGO %in% carreiras_bem_remun(), CARGO %in% carreiras_grandes()) %>% \n      group_by(CARGO) %>% summarise(N_Servidores = n()) %>% summarise(n()) %>% as.character()\n    paste(\"Número de Carreiras:\", t)\n  })\n  \n  # numero de servidores\n  output$text2 <- renderText ({\n    t=servidores %>% filter(CARGO %in% carreiras_bem_remun(), CARGO %in% carreiras_grandes()) %>% \n      group_by(CARGO) %>% summarise(N_Servidores = n()) %>% summarise(sum(N_Servidores)) %>% as.character()\n    paste(\"Número de Servidores:\", t)\n    \n  })\n  \n  #####################################CARREIRAS##########################################  \n  \n  REMUN_TOTAL = sum(servidores$REMUNERACAO)\n  CARGOS = servidores %>% select(CARGO) %>% distinct() %>% arrange(desc(CARGO)) %>% as.matrix() %>% c()\n  \n  # Sidepanel\n  output$carr1 <- renderUI({\n    selectizeInput(\"carr1\", \"Carreira Específica:\", CARGOS, selected = NULL, multiple = TRUE,\n                   options = NULL)\n  })\n  \n  output$carr2 <- renderUI({\n    selectizeInput(\"carr2\", \"Comparar Carreiras:\", CARGOS, selected = NULL, multiple = TRUE,\n                   options = list(placeholder = 'select a state name'))\n  })\n  \n  # TAB Todas\n  output$carreiras <- DT::renderDataTable({\n    datatable(servidores %>% group_by(CARGO) %>% summarise(Salario_Medio = round(mean(REMUNERACAO, rm.na=TRUE), 2), N_Servidores = n(), Gasto_Total=sum(REMUNERACAO), Percentual = round((Gasto_Total*100/REMUN_TOTAL),2)) %>% \n      arrange(desc(Salario_Medio))) \n  })\n  \n  # TAB Específica\n  \n  \n  \n  # TAB Comparar\n  \n  output$carreiras3 <- DT::renderDataTable({\n    if(is.null(input$carr2))\n      return()\n    SALARIO_CAR = servidores %>% filter(CARGO==input$carr2) %>% group_by(CARGO) %>%\n                  summarise(Numero_Servidores = n(), Salario_Medio = round(mean(REMUNERACAO), 2), Salario_Maximo = max(REMUNERACAO), Salario_Minimo = min(REMUNERACAO))\n    datatable(SALARIO_CAR)\n  })\n  \n  output$plot_comp1 <- renderPlot({\n    servidores %>% filter(CARGO %in% input$carr2) %>% \n      ggplot(aes(REMUNERACAO, fill = CARGO)) + \n      geom_histogram(alpha=.8, position=\"dodge\") + \n      labs(x=\"Remuneração\", y=\"\", title=\"Distribuição\") \n  })\n  \n  output$plot_comp2 <- renderPlot({\n    servidores %>% filter(CARGO %in% input$carr2) %>% \n      ggplot(aes(REMUNERACAO, fill = CARGO)) + \n      geom_density(alpha=0.2) + \n      labs(x=\"Remuneração\", y=\"\", title=\"Distribuição\") \n  })\n  \n  output$plot_comp3 <- renderPlot({\n    servidores %>% filter(CARGO %in% input$carr2) %>% group_by(CARGO, UF) %>% summarise(TOTAL=n()) %>%\n      ggplot(aes(UF, TOTAL, fill = CARGO)) + \n      geom_bar(stat = \"identity\", alpha=.8, position=\"dodge\") +\n      labs(x=\"Remuneração\", y=\"\", title=\"Servidores por Estado\") \n  })\n  \n  output$plot_comp4 <- renderPlot({\n    if(is.null(input$carr2))\n      return()\n    servidores %>% filter(CARGO %in% input$carr2) %>% group_by(UF) %>%\n              ggplot(aes(UF, REMUNERACAO, fill = CARGO)) + \n              geom_boxplot(colour = \"darkblue\") + \n              labs(x=\"Estado\", y=\"Quantidade de Servidores\", title=\"Boxplot\")\n  })\n  \n  ####################################Servidores########################################### \n  \n  name = reactive({input$datatab_servidor_rows_current})\n  nome = reactive({\n    if(length(name()) == 1) servidores %>% slice(as.integer(name())) %>% select(NOME) %>% as.matrix() %>% c() else 1\n    })\n  \n  output$texto = renderText({paste(\"Nome: \", nome())})\n  \n  output$tab_resumo <- DT::renderDataTable({\n    serv_remuneracao = servidores %>% filter(NOME %in% nome()) %>% select(REMUNERACAO)\n    serv_cargo = servidores %>% filter(NOME %in% nome()) %>% select(CARGO)\n    remun_cargo = servidores %>% filter(CARGO == serv_cargo[1,]) %>% summarise(Num_Serv = n(), Media = round(mean(REMUNERACAO),2), Min = min(REMUNERACAO), Max = max(REMUNERACAO))\n    num_serv_carg = servidores %>% filter(CARGO == serv_cargo[1,]) %>% summarise(N_Servidores_carreira = n())\n    num_serv_acima = servidores %>% filter(CARGO == serv_cargo[1,] & REMUNERACAO > serv_remuneracao[1,]) %>% summarise(N_Servidores_Acima = n())\n    num_serv_abaixo = servidores %>% filter(CARGO == serv_cargo[1,] & REMUNERACAO < serv_remuneracao[1,]) %>% summarise(N_Servidores_Abaixo = n())\n    resumo_geral = cbind(num_serv_carg, num_serv_acima, num_serv_abaixo, remun_cargo)\n    datatable(resumo_geral) \n  })\n  \n  \n  output$datatab_servidor <- DT::renderDataTable({\n    a = servidores %>% select(-ID)\n    action = dataTableAjax(session, a)\n    datatable(a, server = TRUE, filter = \"top\", options = list(ajax = list(url = action)))\n  })\n  #############################################################################   \n})",
    "created" : 1433086988458.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3289118848",
    "id" : "2FDD301A",
    "lastKnownWriteTime" : 1433092330,
    "path" : "~/GitHub/Servidores/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}